Conflict in state 37 between rule 47 and token T_OR resolved as reduce.
Conflict in state 37 between rule 47 and token T_AND resolved as reduce.
Conflict in state 37 between rule 47 and token T_EQ resolved as reduce.
Conflict in state 37 between rule 47 and token T_NOT_EQ resolved as reduce.
Conflict in state 37 between rule 47 and token T_GREA_EQ resolved as reduce.
Conflict in state 37 between rule 47 and token T_LESS_EQ resolved as reduce.
Conflict in state 37 between rule 47 and token '<' resolved as reduce.
Conflict in state 37 between rule 47 and token '>' resolved as reduce.
Conflict in state 37 between rule 47 and token '+' resolved as reduce.
Conflict in state 37 between rule 47 and token '-' resolved as reduce.
Conflict in state 37 between rule 47 and token '*' resolved as reduce.
Conflict in state 37 between rule 47 and token '/' resolved as reduce.
Conflict in state 37 between rule 47 and token '%' resolved as reduce.
Conflict in state 59 between rule 45 and token T_OR resolved as reduce.
Conflict in state 59 between rule 45 and token T_AND resolved as shift.
Conflict in state 59 between rule 45 and token T_EQ resolved as shift.
Conflict in state 59 between rule 45 and token T_NOT_EQ resolved as shift.
Conflict in state 59 between rule 45 and token T_GREA_EQ resolved as shift.
Conflict in state 59 between rule 45 and token T_LESS_EQ resolved as shift.
Conflict in state 59 between rule 45 and token '<' resolved as shift.
Conflict in state 59 between rule 45 and token '>' resolved as shift.
Conflict in state 59 between rule 45 and token '+' resolved as shift.
Conflict in state 59 between rule 45 and token '-' resolved as shift.
Conflict in state 59 between rule 45 and token '*' resolved as shift.
Conflict in state 59 between rule 45 and token '/' resolved as shift.
Conflict in state 59 between rule 45 and token '%' resolved as shift.
Conflict in state 60 between rule 46 and token T_OR resolved as reduce.
Conflict in state 60 between rule 46 and token T_AND resolved as reduce.
Conflict in state 60 between rule 46 and token T_EQ resolved as shift.
Conflict in state 60 between rule 46 and token T_NOT_EQ resolved as shift.
Conflict in state 60 between rule 46 and token T_GREA_EQ resolved as shift.
Conflict in state 60 between rule 46 and token T_LESS_EQ resolved as shift.
Conflict in state 60 between rule 46 and token '<' resolved as shift.
Conflict in state 60 between rule 46 and token '>' resolved as shift.
Conflict in state 60 between rule 46 and token '+' resolved as shift.
Conflict in state 60 between rule 46 and token '-' resolved as shift.
Conflict in state 60 between rule 46 and token '*' resolved as shift.
Conflict in state 60 between rule 46 and token '/' resolved as shift.
Conflict in state 60 between rule 46 and token '%' resolved as shift.
Conflict in state 61 between rule 44 and token T_OR resolved as reduce.
Conflict in state 61 between rule 44 and token T_AND resolved as reduce.
Conflict in state 61 between rule 44 and token T_EQ resolved as reduce.
Conflict in state 61 between rule 44 and token T_NOT_EQ resolved as reduce.
Conflict in state 61 between rule 44 and token T_GREA_EQ resolved as reduce.
Conflict in state 61 between rule 44 and token T_LESS_EQ resolved as reduce.
Conflict in state 61 between rule 44 and token '<' resolved as reduce.
Conflict in state 61 between rule 44 and token '>' resolved as reduce.
Conflict in state 61 between rule 44 and token '+' resolved as shift.
Conflict in state 61 between rule 44 and token '-' resolved as shift.
Conflict in state 61 between rule 44 and token '*' resolved as shift.
Conflict in state 61 between rule 44 and token '/' resolved as shift.
Conflict in state 61 between rule 44 and token '%' resolved as shift.
Conflict in state 62 between rule 43 and token T_OR resolved as reduce.
Conflict in state 62 between rule 43 and token T_AND resolved as reduce.
Conflict in state 62 between rule 43 and token T_EQ resolved as reduce.
Conflict in state 62 between rule 43 and token T_NOT_EQ resolved as reduce.
Conflict in state 62 between rule 43 and token T_GREA_EQ resolved as reduce.
Conflict in state 62 between rule 43 and token T_LESS_EQ resolved as reduce.
Conflict in state 62 between rule 43 and token '<' resolved as reduce.
Conflict in state 62 between rule 43 and token '>' resolved as reduce.
Conflict in state 62 between rule 43 and token '+' resolved as shift.
Conflict in state 62 between rule 43 and token '-' resolved as shift.
Conflict in state 62 between rule 43 and token '*' resolved as shift.
Conflict in state 62 between rule 43 and token '/' resolved as shift.
Conflict in state 62 between rule 43 and token '%' resolved as shift.
Conflict in state 63 between rule 42 and token T_OR resolved as reduce.
Conflict in state 63 between rule 42 and token T_AND resolved as reduce.
Conflict in state 63 between rule 42 and token T_EQ resolved as reduce.
Conflict in state 63 between rule 42 and token T_NOT_EQ resolved as reduce.
Conflict in state 63 between rule 42 and token T_GREA_EQ resolved as reduce.
Conflict in state 63 between rule 42 and token T_LESS_EQ resolved as reduce.
Conflict in state 63 between rule 42 and token '<' resolved as reduce.
Conflict in state 63 between rule 42 and token '>' resolved as reduce.
Conflict in state 63 between rule 42 and token '+' resolved as shift.
Conflict in state 63 between rule 42 and token '-' resolved as shift.
Conflict in state 63 between rule 42 and token '*' resolved as shift.
Conflict in state 63 between rule 42 and token '/' resolved as shift.
Conflict in state 63 between rule 42 and token '%' resolved as shift.
Conflict in state 64 between rule 41 and token T_OR resolved as reduce.
Conflict in state 64 between rule 41 and token T_AND resolved as reduce.
Conflict in state 64 between rule 41 and token T_EQ resolved as reduce.
Conflict in state 64 between rule 41 and token T_NOT_EQ resolved as reduce.
Conflict in state 64 between rule 41 and token T_GREA_EQ resolved as reduce.
Conflict in state 64 between rule 41 and token T_LESS_EQ resolved as reduce.
Conflict in state 64 between rule 41 and token '<' resolved as reduce.
Conflict in state 64 between rule 41 and token '>' resolved as reduce.
Conflict in state 64 between rule 41 and token '+' resolved as shift.
Conflict in state 64 between rule 41 and token '-' resolved as shift.
Conflict in state 64 between rule 41 and token '*' resolved as shift.
Conflict in state 64 between rule 41 and token '/' resolved as shift.
Conflict in state 64 between rule 41 and token '%' resolved as shift.
Conflict in state 65 between rule 39 and token T_OR resolved as reduce.
Conflict in state 65 between rule 39 and token T_AND resolved as reduce.
Conflict in state 65 between rule 39 and token T_EQ resolved as reduce.
Conflict in state 65 between rule 39 and token T_NOT_EQ resolved as reduce.
Conflict in state 65 between rule 39 and token T_GREA_EQ resolved as reduce.
Conflict in state 65 between rule 39 and token T_LESS_EQ resolved as reduce.
Conflict in state 65 between rule 39 and token '<' resolved as reduce.
Conflict in state 65 between rule 39 and token '>' resolved as reduce.
Conflict in state 65 between rule 39 and token '+' resolved as shift.
Conflict in state 65 between rule 39 and token '-' resolved as shift.
Conflict in state 65 between rule 39 and token '*' resolved as shift.
Conflict in state 65 between rule 39 and token '/' resolved as shift.
Conflict in state 65 between rule 39 and token '%' resolved as shift.
Conflict in state 66 between rule 40 and token T_OR resolved as reduce.
Conflict in state 66 between rule 40 and token T_AND resolved as reduce.
Conflict in state 66 between rule 40 and token T_EQ resolved as reduce.
Conflict in state 66 between rule 40 and token T_NOT_EQ resolved as reduce.
Conflict in state 66 between rule 40 and token T_GREA_EQ resolved as reduce.
Conflict in state 66 between rule 40 and token T_LESS_EQ resolved as reduce.
Conflict in state 66 between rule 40 and token '<' resolved as reduce.
Conflict in state 66 between rule 40 and token '>' resolved as reduce.
Conflict in state 66 between rule 40 and token '+' resolved as shift.
Conflict in state 66 between rule 40 and token '-' resolved as shift.
Conflict in state 66 between rule 40 and token '*' resolved as shift.
Conflict in state 66 between rule 40 and token '/' resolved as shift.
Conflict in state 66 between rule 40 and token '%' resolved as shift.
Conflict in state 67 between rule 34 and token T_OR resolved as reduce.
Conflict in state 67 between rule 34 and token T_AND resolved as reduce.
Conflict in state 67 between rule 34 and token T_EQ resolved as reduce.
Conflict in state 67 between rule 34 and token T_NOT_EQ resolved as reduce.
Conflict in state 67 between rule 34 and token T_GREA_EQ resolved as reduce.
Conflict in state 67 between rule 34 and token T_LESS_EQ resolved as reduce.
Conflict in state 67 between rule 34 and token '<' resolved as reduce.
Conflict in state 67 between rule 34 and token '>' resolved as reduce.
Conflict in state 67 between rule 34 and token '+' resolved as reduce.
Conflict in state 67 between rule 34 and token '-' resolved as reduce.
Conflict in state 67 between rule 34 and token '*' resolved as shift.
Conflict in state 67 between rule 34 and token '/' resolved as shift.
Conflict in state 67 between rule 34 and token '%' resolved as shift.
Conflict in state 68 between rule 35 and token T_OR resolved as reduce.
Conflict in state 68 between rule 35 and token T_AND resolved as reduce.
Conflict in state 68 between rule 35 and token T_EQ resolved as reduce.
Conflict in state 68 between rule 35 and token T_NOT_EQ resolved as reduce.
Conflict in state 68 between rule 35 and token T_GREA_EQ resolved as reduce.
Conflict in state 68 between rule 35 and token T_LESS_EQ resolved as reduce.
Conflict in state 68 between rule 35 and token '<' resolved as reduce.
Conflict in state 68 between rule 35 and token '>' resolved as reduce.
Conflict in state 68 between rule 35 and token '+' resolved as reduce.
Conflict in state 68 between rule 35 and token '-' resolved as reduce.
Conflict in state 68 between rule 35 and token '*' resolved as shift.
Conflict in state 68 between rule 35 and token '/' resolved as shift.
Conflict in state 68 between rule 35 and token '%' resolved as shift.
Conflict in state 69 between rule 36 and token T_OR resolved as reduce.
Conflict in state 69 between rule 36 and token T_AND resolved as reduce.
Conflict in state 69 between rule 36 and token T_EQ resolved as reduce.
Conflict in state 69 between rule 36 and token T_NOT_EQ resolved as reduce.
Conflict in state 69 between rule 36 and token T_GREA_EQ resolved as reduce.
Conflict in state 69 between rule 36 and token T_LESS_EQ resolved as reduce.
Conflict in state 69 between rule 36 and token '<' resolved as reduce.
Conflict in state 69 between rule 36 and token '>' resolved as reduce.
Conflict in state 69 between rule 36 and token '+' resolved as reduce.
Conflict in state 69 between rule 36 and token '-' resolved as reduce.
Conflict in state 69 between rule 36 and token '*' resolved as reduce.
Conflict in state 69 between rule 36 and token '/' resolved as reduce.
Conflict in state 69 between rule 36 and token '%' resolved as reduce.
Conflict in state 70 between rule 37 and token T_OR resolved as reduce.
Conflict in state 70 between rule 37 and token T_AND resolved as reduce.
Conflict in state 70 between rule 37 and token T_EQ resolved as reduce.
Conflict in state 70 between rule 37 and token T_NOT_EQ resolved as reduce.
Conflict in state 70 between rule 37 and token T_GREA_EQ resolved as reduce.
Conflict in state 70 between rule 37 and token T_LESS_EQ resolved as reduce.
Conflict in state 70 between rule 37 and token '<' resolved as reduce.
Conflict in state 70 between rule 37 and token '>' resolved as reduce.
Conflict in state 70 between rule 37 and token '+' resolved as reduce.
Conflict in state 70 between rule 37 and token '-' resolved as reduce.
Conflict in state 70 between rule 37 and token '*' resolved as reduce.
Conflict in state 70 between rule 37 and token '/' resolved as reduce.
Conflict in state 70 between rule 37 and token '%' resolved as reduce.
Conflict in state 71 between rule 38 and token T_OR resolved as reduce.
Conflict in state 71 between rule 38 and token T_AND resolved as reduce.
Conflict in state 71 between rule 38 and token T_EQ resolved as reduce.
Conflict in state 71 between rule 38 and token T_NOT_EQ resolved as reduce.
Conflict in state 71 between rule 38 and token T_GREA_EQ resolved as reduce.
Conflict in state 71 between rule 38 and token T_LESS_EQ resolved as reduce.
Conflict in state 71 between rule 38 and token '<' resolved as reduce.
Conflict in state 71 between rule 38 and token '>' resolved as reduce.
Conflict in state 71 between rule 38 and token '+' resolved as reduce.
Conflict in state 71 between rule 38 and token '-' resolved as reduce.
Conflict in state 71 between rule 38 and token '*' resolved as reduce.
Conflict in state 71 between rule 38 and token '/' resolved as reduce.
Conflict in state 71 between rule 38 and token '%' resolved as reduce.


Grammar

  Number, Line, Rule
    1  48 prog -> prog unit
    2  49 prog -> /* empty */
    3  52 unit -> if_unit
    4  53 unit -> ifdef_unit
    5  54 unit -> ifndef_unit
    6  55 unit -> inactive_if_unit
    7  56 unit -> define_unit
    8  57 unit -> undef_unit
    9  58 unit -> include_unit
   10  59 unit -> fortran
   11  62 include_unit -> T_INCLUDE
   12  65 define_unit -> T_DEFINE
   13  68 undef_unit -> T_UNDEF
   14  71 @1 -> /* empty */
   15  71 @2 -> /* empty */
   16  71 ifdef_unit -> T_IFDEF @1 defined @2 T_EXPR_DONE prog else_unit T_ENDIF
   17  79 @3 -> /* empty */
   18  79 @4 -> /* empty */
   19  79 ifndef_unit -> T_IFNDEF @3 defined @4 T_EXPR_DONE prog else_unit T_ENDIF
   20  87 @5 -> /* empty */
   21  87 @6 -> /* empty */
   22  87 if_unit -> T_IF @5 expr @6 T_EXPR_DONE prog elif_units else_unit T_ENDIF
   23  96 elif_units -> elif_units elif_unit
   24  97 elif_units -> /* empty */
   25 100 @7 -> /* empty */
   26 100 elif_unit -> T_ELIF expr @7 T_EXPR_DONE prog
   27 106 @8 -> /* empty */
   28 106 else_unit -> T_ELSE @8 prog
   29 108 else_unit -> /* empty */
   30 113 @9 -> /* empty */
   31 113 inactive_if_unit -> T_INACTIVE_IF @9 prog T_ENDIF
   32 119 defined -> name
   33 122 fortran -> T_FORTRAN
   34 125 expr -> expr '+' expr
   35 126 expr -> expr '-' expr
   36 127 expr -> expr '*' expr
   37 128 expr -> expr '/' expr
   38 129 expr -> expr '%' expr
   39 130 expr -> expr '<' expr
   40 131 expr -> expr '>' expr
   41 132 expr -> expr T_LESS_EQ expr
   42 133 expr -> expr T_GREA_EQ expr
   43 134 expr -> expr T_NOT_EQ expr
   44 135 expr -> expr T_EQ expr
   45 136 expr -> expr T_OR expr
   46 137 expr -> expr T_AND expr
   47 138 expr -> '!' expr
   48 139 expr -> operator
   49 140 expr -> '(' expr ')'
   50 141 expr -> name
   51 144 operator -> T_DEFINED '(' name ')'
   52 145 operator -> T_STREQ '(' name ',' name ')'
   53 148 name -> T_NAME


Terminals, with rules where they appear

$ (-1)
'!' (33) 47
'%' (37) 38
'(' (40) 49 51 52
')' (41) 49 51 52
'*' (42) 36
'+' (43) 34
',' (44) 52
'-' (45) 35
'/' (47) 37
'<' (60) 39
'>' (62) 40
error (256)
T_FORTRAN (257) 33
T_INCLUDE (258) 11
T_IF (259) 22
T_INACTIVE_IF (260) 31
T_ELIF (261) 26
T_IFDEF (262) 16
T_IFNDEF (263) 19
T_ELSE (264) 28
T_ENDIF (265) 16 19 22 31
T_DEFINE (266) 12
T_UNDEF (267) 13
T_EXPR_DONE (268) 16 19 22 26
T_OR (269) 45
T_AND (270) 46
T_EQ (271) 44
T_NOT_EQ (272) 43
T_GREA_EQ (273) 42
T_LESS_EQ (274) 41
T_NAME (275) 53
T_DEFINED (276) 51
T_STREQ (277) 52


Nonterminals, with rules where they appear

prog (35)
    on left: 1 2, on right: 1 16 19 22 26 28 31
unit (36)
    on left: 3 4 5 6 7 8 9 10, on right: 1
include_unit (37)
    on left: 11, on right: 9
define_unit (38)
    on left: 12, on right: 7
undef_unit (39)
    on left: 13, on right: 8
ifdef_unit (40)
    on left: 16, on right: 4
@1 (41)
    on left: 14, on right: 16
@2 (42)
    on left: 15, on right: 16
ifndef_unit (43)
    on left: 19, on right: 5
@3 (44)
    on left: 17, on right: 19
@4 (45)
    on left: 18, on right: 19
if_unit (46)
    on left: 22, on right: 3
@5 (47)
    on left: 20, on right: 22
@6 (48)
    on left: 21, on right: 22
elif_units (49)
    on left: 23 24, on right: 22 23
elif_unit (50)
    on left: 26, on right: 23
@7 (51)
    on left: 25, on right: 26
else_unit (52)
    on left: 28 29, on right: 16 19 22
@8 (53)
    on left: 27, on right: 28
inactive_if_unit (54)
    on left: 31, on right: 6
@9 (55)
    on left: 30, on right: 31
defined (56)
    on left: 32, on right: 16 19
fortran (57)
    on left: 33, on right: 10
expr (58)
    on left: 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50,
    on right: 22 26 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49
operator (59)
    on left: 51 52, on right: 48
name (60)
    on left: 53, on right: 32 50 51 52


state 0

    $default	reduce using rule 2 (prog)

    prog	go to state 1



state 1

    prog  ->  prog . unit   (rule 1)

    $   	go to state 98
    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 2

    fortran  ->  T_FORTRAN .   (rule 33)

    $default	reduce using rule 33 (fortran)



state 3

    include_unit  ->  T_INCLUDE .   (rule 11)

    $default	reduce using rule 11 (include_unit)



state 4

    if_unit  ->  T_IF . @5 expr @6 T_EXPR_DONE prog elif_units else_unit T_ENDIF   (rule 22)

    $default	reduce using rule 20 (@5)

    @5  	go to state 19



state 5

    inactive_if_unit  ->  T_INACTIVE_IF . @9 prog T_ENDIF   (rule 31)

    $default	reduce using rule 30 (@9)

    @9  	go to state 20



state 6

    ifdef_unit  ->  T_IFDEF . @1 defined @2 T_EXPR_DONE prog else_unit T_ENDIF   (rule 16)

    $default	reduce using rule 14 (@1)

    @1  	go to state 21



state 7

    ifndef_unit  ->  T_IFNDEF . @3 defined @4 T_EXPR_DONE prog else_unit T_ENDIF   (rule 19)

    $default	reduce using rule 17 (@3)

    @3  	go to state 22



state 8

    define_unit  ->  T_DEFINE .   (rule 12)

    $default	reduce using rule 12 (define_unit)



state 9

    undef_unit  ->  T_UNDEF .   (rule 13)

    $default	reduce using rule 13 (undef_unit)



state 10

    prog  ->  prog unit .   (rule 1)

    $default	reduce using rule 1 (prog)



state 11

    unit  ->  include_unit .   (rule 9)

    $default	reduce using rule 9 (unit)



state 12

    unit  ->  define_unit .   (rule 7)

    $default	reduce using rule 7 (unit)



state 13

    unit  ->  undef_unit .   (rule 8)

    $default	reduce using rule 8 (unit)



state 14

    unit  ->  ifdef_unit .   (rule 4)

    $default	reduce using rule 4 (unit)



state 15

    unit  ->  ifndef_unit .   (rule 5)

    $default	reduce using rule 5 (unit)



state 16

    unit  ->  if_unit .   (rule 3)

    $default	reduce using rule 3 (unit)



state 17

    unit  ->  inactive_if_unit .   (rule 6)

    $default	reduce using rule 6 (unit)



state 18

    unit  ->  fortran .   (rule 10)

    $default	reduce using rule 10 (unit)



state 19

    if_unit  ->  T_IF @5 . expr @6 T_EXPR_DONE prog elif_units else_unit T_ENDIF   (rule 22)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 28
    operator	go to state 29
    name	go to state 30



state 20

    inactive_if_unit  ->  T_INACTIVE_IF @9 . prog T_ENDIF   (rule 31)

    $default	reduce using rule 2 (prog)

    prog	go to state 31



state 21

    ifdef_unit  ->  T_IFDEF @1 . defined @2 T_EXPR_DONE prog else_unit T_ENDIF   (rule 16)

    T_NAME	shift, and go to state 23

    defined	go to state 32
    name	go to state 33



state 22

    ifndef_unit  ->  T_IFNDEF @3 . defined @4 T_EXPR_DONE prog else_unit T_ENDIF   (rule 19)

    T_NAME	shift, and go to state 23

    defined	go to state 34
    name	go to state 33



state 23

    name  ->  T_NAME .   (rule 53)

    $default	reduce using rule 53 (name)



state 24

    operator  ->  T_DEFINED . '(' name ')'   (rule 51)

    '(' 	shift, and go to state 35



state 25

    operator  ->  T_STREQ . '(' name ',' name ')'   (rule 52)

    '(' 	shift, and go to state 36



state 26

    expr  ->  '!' . expr   (rule 47)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 37
    operator	go to state 29
    name	go to state 30



state 27

    expr  ->  '(' . expr ')'   (rule 49)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 38
    operator	go to state 29
    name	go to state 30



state 28

    if_unit  ->  T_IF @5 expr . @6 T_EXPR_DONE prog elif_units else_unit T_ENDIF   (rule 22)
    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    T_OR	shift, and go to state 39
    T_AND	shift, and go to state 40
    T_EQ	shift, and go to state 41
    T_NOT_EQ	shift, and go to state 42
    T_GREA_EQ	shift, and go to state 43
    T_LESS_EQ	shift, and go to state 44
    '<' 	shift, and go to state 45
    '>' 	shift, and go to state 46
    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 21 (@6)

    @6  	go to state 52



state 29

    expr  ->  operator .   (rule 48)

    $default	reduce using rule 48 (expr)



state 30

    expr  ->  name .   (rule 50)

    $default	reduce using rule 50 (expr)



state 31

    prog  ->  prog . unit   (rule 1)
    inactive_if_unit  ->  T_INACTIVE_IF @9 prog . T_ENDIF   (rule 31)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_ENDIF	shift, and go to state 53
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 32

    ifdef_unit  ->  T_IFDEF @1 defined . @2 T_EXPR_DONE prog else_unit T_ENDIF   (rule 16)

    $default	reduce using rule 15 (@2)

    @2  	go to state 54



state 33

    defined  ->  name .   (rule 32)

    $default	reduce using rule 32 (defined)



state 34

    ifndef_unit  ->  T_IFNDEF @3 defined . @4 T_EXPR_DONE prog else_unit T_ENDIF   (rule 19)

    $default	reduce using rule 18 (@4)

    @4  	go to state 55



state 35

    operator  ->  T_DEFINED '(' . name ')'   (rule 51)

    T_NAME	shift, and go to state 23

    name	go to state 56



state 36

    operator  ->  T_STREQ '(' . name ',' name ')'   (rule 52)

    T_NAME	shift, and go to state 23

    name	go to state 57



state 37

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)
    expr  ->  '!' expr .   (rule 47)


    $default	reduce using rule 47 (expr)



state 38

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)
    expr  ->  '(' expr . ')'   (rule 49)

    T_OR	shift, and go to state 39
    T_AND	shift, and go to state 40
    T_EQ	shift, and go to state 41
    T_NOT_EQ	shift, and go to state 42
    T_GREA_EQ	shift, and go to state 43
    T_LESS_EQ	shift, and go to state 44
    '<' 	shift, and go to state 45
    '>' 	shift, and go to state 46
    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51
    ')' 	shift, and go to state 58



state 39

    expr  ->  expr T_OR . expr   (rule 45)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 59
    operator	go to state 29
    name	go to state 30



state 40

    expr  ->  expr T_AND . expr   (rule 46)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 60
    operator	go to state 29
    name	go to state 30



state 41

    expr  ->  expr T_EQ . expr   (rule 44)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 61
    operator	go to state 29
    name	go to state 30



state 42

    expr  ->  expr T_NOT_EQ . expr   (rule 43)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 62
    operator	go to state 29
    name	go to state 30



state 43

    expr  ->  expr T_GREA_EQ . expr   (rule 42)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 63
    operator	go to state 29
    name	go to state 30



state 44

    expr  ->  expr T_LESS_EQ . expr   (rule 41)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 64
    operator	go to state 29
    name	go to state 30



state 45

    expr  ->  expr '<' . expr   (rule 39)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 65
    operator	go to state 29
    name	go to state 30



state 46

    expr  ->  expr '>' . expr   (rule 40)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 66
    operator	go to state 29
    name	go to state 30



state 47

    expr  ->  expr '+' . expr   (rule 34)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 67
    operator	go to state 29
    name	go to state 30



state 48

    expr  ->  expr '-' . expr   (rule 35)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 68
    operator	go to state 29
    name	go to state 30



state 49

    expr  ->  expr '*' . expr   (rule 36)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 69
    operator	go to state 29
    name	go to state 30



state 50

    expr  ->  expr '/' . expr   (rule 37)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 70
    operator	go to state 29
    name	go to state 30



state 51

    expr  ->  expr '%' . expr   (rule 38)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 71
    operator	go to state 29
    name	go to state 30



state 52

    if_unit  ->  T_IF @5 expr @6 . T_EXPR_DONE prog elif_units else_unit T_ENDIF   (rule 22)

    T_EXPR_DONE	shift, and go to state 72



state 53

    inactive_if_unit  ->  T_INACTIVE_IF @9 prog T_ENDIF .   (rule 31)

    $default	reduce using rule 31 (inactive_if_unit)



state 54

    ifdef_unit  ->  T_IFDEF @1 defined @2 . T_EXPR_DONE prog else_unit T_ENDIF   (rule 16)

    T_EXPR_DONE	shift, and go to state 73



state 55

    ifndef_unit  ->  T_IFNDEF @3 defined @4 . T_EXPR_DONE prog else_unit T_ENDIF   (rule 19)

    T_EXPR_DONE	shift, and go to state 74



state 56

    operator  ->  T_DEFINED '(' name . ')'   (rule 51)

    ')' 	shift, and go to state 75



state 57

    operator  ->  T_STREQ '(' name . ',' name ')'   (rule 52)

    ',' 	shift, and go to state 76



state 58

    expr  ->  '(' expr ')' .   (rule 49)

    $default	reduce using rule 49 (expr)



state 59

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr T_OR expr .   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    T_AND	shift, and go to state 40
    T_EQ	shift, and go to state 41
    T_NOT_EQ	shift, and go to state 42
    T_GREA_EQ	shift, and go to state 43
    T_LESS_EQ	shift, and go to state 44
    '<' 	shift, and go to state 45
    '>' 	shift, and go to state 46
    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 45 (expr)



state 60

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)
    expr  ->  expr T_AND expr .   (rule 46)

    T_EQ	shift, and go to state 41
    T_NOT_EQ	shift, and go to state 42
    T_GREA_EQ	shift, and go to state 43
    T_LESS_EQ	shift, and go to state 44
    '<' 	shift, and go to state 45
    '>' 	shift, and go to state 46
    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 46 (expr)



state 61

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr T_EQ expr .   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 44 (expr)



state 62

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr T_NOT_EQ expr .   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 43 (expr)



state 63

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr T_GREA_EQ expr .   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 42 (expr)



state 64

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr T_LESS_EQ expr .   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 41 (expr)



state 65

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr '<' expr .   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 39 (expr)



state 66

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr '>' expr .   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 40 (expr)



state 67

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr '+' expr .   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 34 (expr)



state 68

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr '-' expr .   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 35 (expr)



state 69

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr '*' expr .   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)


    $default	reduce using rule 36 (expr)



state 70

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr '/' expr .   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)


    $default	reduce using rule 37 (expr)



state 71

    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr '%' expr .   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)


    $default	reduce using rule 38 (expr)



state 72

    if_unit  ->  T_IF @5 expr @6 T_EXPR_DONE . prog elif_units else_unit T_ENDIF   (rule 22)

    $default	reduce using rule 2 (prog)

    prog	go to state 77



state 73

    ifdef_unit  ->  T_IFDEF @1 defined @2 T_EXPR_DONE . prog else_unit T_ENDIF   (rule 16)

    $default	reduce using rule 2 (prog)

    prog	go to state 78



state 74

    ifndef_unit  ->  T_IFNDEF @3 defined @4 T_EXPR_DONE . prog else_unit T_ENDIF   (rule 19)

    $default	reduce using rule 2 (prog)

    prog	go to state 79



state 75

    operator  ->  T_DEFINED '(' name ')' .   (rule 51)

    $default	reduce using rule 51 (operator)



state 76

    operator  ->  T_STREQ '(' name ',' . name ')'   (rule 52)

    T_NAME	shift, and go to state 23

    name	go to state 80



state 77

    prog  ->  prog . unit   (rule 1)
    if_unit  ->  T_IF @5 expr @6 T_EXPR_DONE prog . elif_units else_unit T_ENDIF   (rule 22)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    $default	reduce using rule 24 (elif_units)

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    elif_units	go to state 81
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 78

    prog  ->  prog . unit   (rule 1)
    ifdef_unit  ->  T_IFDEF @1 defined @2 T_EXPR_DONE prog . else_unit T_ENDIF   (rule 16)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_ELSE	shift, and go to state 82
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    $default	reduce using rule 29 (else_unit)

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    else_unit	go to state 83
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 79

    prog  ->  prog . unit   (rule 1)
    ifndef_unit  ->  T_IFNDEF @3 defined @4 T_EXPR_DONE prog . else_unit T_ENDIF   (rule 19)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_ELSE	shift, and go to state 82
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    $default	reduce using rule 29 (else_unit)

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    else_unit	go to state 84
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 80

    operator  ->  T_STREQ '(' name ',' name . ')'   (rule 52)

    ')' 	shift, and go to state 85



state 81

    if_unit  ->  T_IF @5 expr @6 T_EXPR_DONE prog elif_units . else_unit T_ENDIF   (rule 22)
    elif_units  ->  elif_units . elif_unit   (rule 23)

    T_ELIF	shift, and go to state 86
    T_ELSE	shift, and go to state 82

    $default	reduce using rule 29 (else_unit)

    elif_unit	go to state 87
    else_unit	go to state 88



state 82

    else_unit  ->  T_ELSE . @8 prog   (rule 28)

    $default	reduce using rule 27 (@8)

    @8  	go to state 89



state 83

    ifdef_unit  ->  T_IFDEF @1 defined @2 T_EXPR_DONE prog else_unit . T_ENDIF   (rule 16)

    T_ENDIF	shift, and go to state 90



state 84

    ifndef_unit  ->  T_IFNDEF @3 defined @4 T_EXPR_DONE prog else_unit . T_ENDIF   (rule 19)

    T_ENDIF	shift, and go to state 91



state 85

    operator  ->  T_STREQ '(' name ',' name ')' .   (rule 52)

    $default	reduce using rule 52 (operator)



state 86

    elif_unit  ->  T_ELIF . expr @7 T_EXPR_DONE prog   (rule 26)

    T_NAME	shift, and go to state 23
    T_DEFINED	shift, and go to state 24
    T_STREQ	shift, and go to state 25
    '!' 	shift, and go to state 26
    '(' 	shift, and go to state 27

    expr	go to state 92
    operator	go to state 29
    name	go to state 30



state 87

    elif_units  ->  elif_units elif_unit .   (rule 23)

    $default	reduce using rule 23 (elif_units)



state 88

    if_unit  ->  T_IF @5 expr @6 T_EXPR_DONE prog elif_units else_unit . T_ENDIF   (rule 22)

    T_ENDIF	shift, and go to state 93



state 89

    else_unit  ->  T_ELSE @8 . prog   (rule 28)

    $default	reduce using rule 2 (prog)

    prog	go to state 94



state 90

    ifdef_unit  ->  T_IFDEF @1 defined @2 T_EXPR_DONE prog else_unit T_ENDIF .   (rule 16)

    $default	reduce using rule 16 (ifdef_unit)



state 91

    ifndef_unit  ->  T_IFNDEF @3 defined @4 T_EXPR_DONE prog else_unit T_ENDIF .   (rule 19)

    $default	reduce using rule 19 (ifndef_unit)



state 92

    elif_unit  ->  T_ELIF expr . @7 T_EXPR_DONE prog   (rule 26)
    expr  ->  expr . '+' expr   (rule 34)
    expr  ->  expr . '-' expr   (rule 35)
    expr  ->  expr . '*' expr   (rule 36)
    expr  ->  expr . '/' expr   (rule 37)
    expr  ->  expr . '%' expr   (rule 38)
    expr  ->  expr . '<' expr   (rule 39)
    expr  ->  expr . '>' expr   (rule 40)
    expr  ->  expr . T_LESS_EQ expr   (rule 41)
    expr  ->  expr . T_GREA_EQ expr   (rule 42)
    expr  ->  expr . T_NOT_EQ expr   (rule 43)
    expr  ->  expr . T_EQ expr   (rule 44)
    expr  ->  expr . T_OR expr   (rule 45)
    expr  ->  expr . T_AND expr   (rule 46)

    T_OR	shift, and go to state 39
    T_AND	shift, and go to state 40
    T_EQ	shift, and go to state 41
    T_NOT_EQ	shift, and go to state 42
    T_GREA_EQ	shift, and go to state 43
    T_LESS_EQ	shift, and go to state 44
    '<' 	shift, and go to state 45
    '>' 	shift, and go to state 46
    '+' 	shift, and go to state 47
    '-' 	shift, and go to state 48
    '*' 	shift, and go to state 49
    '/' 	shift, and go to state 50
    '%' 	shift, and go to state 51

    $default	reduce using rule 25 (@7)

    @7  	go to state 95



state 93

    if_unit  ->  T_IF @5 expr @6 T_EXPR_DONE prog elif_units else_unit T_ENDIF .   (rule 22)

    $default	reduce using rule 22 (if_unit)



state 94

    prog  ->  prog . unit   (rule 1)
    else_unit  ->  T_ELSE @8 prog .   (rule 28)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    $default	reduce using rule 28 (else_unit)

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 95

    elif_unit  ->  T_ELIF expr @7 . T_EXPR_DONE prog   (rule 26)

    T_EXPR_DONE	shift, and go to state 96



state 96

    elif_unit  ->  T_ELIF expr @7 T_EXPR_DONE . prog   (rule 26)

    $default	reduce using rule 2 (prog)

    prog	go to state 97



state 97

    prog  ->  prog . unit   (rule 1)
    elif_unit  ->  T_ELIF expr @7 T_EXPR_DONE prog .   (rule 26)

    T_FORTRAN	shift, and go to state 2
    T_INCLUDE	shift, and go to state 3
    T_IF	shift, and go to state 4
    T_INACTIVE_IF	shift, and go to state 5
    T_IFDEF	shift, and go to state 6
    T_IFNDEF	shift, and go to state 7
    T_DEFINE	shift, and go to state 8
    T_UNDEF	shift, and go to state 9

    $default	reduce using rule 26 (elif_unit)

    unit	go to state 10
    include_unit	go to state 11
    define_unit	go to state 12
    undef_unit	go to state 13
    ifdef_unit	go to state 14
    ifndef_unit	go to state 15
    if_unit	go to state 16
    inactive_if_unit	go to state 17
    fortran	go to state 18



state 98

    $   	go to state 99



state 99

    $default	accept


