      SUBROUTINE VIBGF(B,EX,EY,EZ,NXYZ,NNE,ISOMOL)
      IMPLICIT REAL*8 (A-H,O-Z)
cets030991
#include <error.h>
      integer ip,prcntr
      DIMENSION B(NXYZ,NXYZ),EX(NNE,NNE),EY(NNE,NNE),EZ(NNE,NNE)
C   THE NORMAL COORDINATE ANALYSIS BY GF MATRIX METHOD
C   FX IS A FORCE CONSTANT MATRIX IN CARTESIAN COORDINATE SYSTEM
C   F IS A FORCE CONSTANT MATRIX IN INTERNAL COORDINATE SYSTEM
C   DIMENSION AND COMMON STATEMENTS
      LOGICAL ISOMOL
      COMMON/VIB101/NATOM,NAT1,N3N,ILIN,NVIB,IDIPOL,IPOLAR
      COMMON/VIB102/LDIM,MDIM,NDIM
      COMMON/VIB103/NST,NBND,NLIB,NDEF,NTORS
      COMMON/VIB104/PARA,WAVE,CONST,CYCL,CONV
      COMMON/VIB105/AIXX,AIYY,AIZZ,SUMW,ROTCM(3)
      COMMON/VIB107/NIC,NINT,ISYM,NSYM
      COMMON/VIB201/CHG(50),X(50),Y(50),Z(50),W(50)
      COMMON/VIB202/R(1275)
      COMMON/VIB205/IOFF(150)
      COMMON/VIB301/KR(150),LR(150)
      COMMON/VIB302/KA(150),LA(150),MA(150)
      COMMON/VIB303/KB(150),LB(150),MB(150)
      COMMON/VIB304/KD(150),LD(150),MD(150),ND(150)
      COMMON/VIB305/KT(150),LT(150),MT(150),NT(150)
      COMMON/VIB306/AGLB(150),AGLT(150),AGLO(150),AGLR(150)
      COMMON/VIB307/AGLL(150),AGLD(150),AGLE(150),AGLF(150)
      DATA PI / 3.1415926536D+00 /
      DATA A00,ONE / 0.0D+00 , 1.0D+00 /
C   FORMAT STATEMENTS
    1 FORMAT(//,2X,' THE NORMAL COORDINATE ANALYSIS BY GF MATRIX METHOD
     1'/)
    2 FORMAT(10I5)
    3 FORMAT(//,2X,' PARAMETERS FOR MOLECULAR VIBRATION'//
     * 2X,' NST    = ',I5/
     * 2X,' NBND   = ',I5/
     $ 2X,' NLIB   = ',I5/
     * 2X,' NDEF   = ',I5/
     * 2X,' NTORS  = ',I5/
     * 2X,' NINT   = ',I5/
     * 2X,' NROT   = ',I5/
     * 2X,' NIC    = ',I5/
     * 2X,' NVIB   = ',I5/
     * 2X,' ILIN   = ',I5/
     * 2X,' ISYM   = ',I5)
    4 FORMAT(2I5)
    5 FORMAT(//,2X,21H INTERNAL COORDINATES,50X,11H COORDINATE/
     1 73X,4H NO.)
    6 FORMAT(2X,11H STRETCHING/
     1 2X,20H   R   K-L    K    L/)
    7 FORMAT(2X,F10.5,2I5,51X,2H (,I2,1H))
    8 FORMAT(3I5)
    9 FORMAT(/,2X,11H BOND ANGLE/2X,8H BENDING/
     1 2X,25H ANG-KLM      K    L    M/)
   10 FORMAT(2X,F10.5,3I5,46X,2H (,I2,1H))
   11 FORMAT(/,2X,' LINEAR BENDING'/
     1 2X,8H ANG-KLM,5X,2H K,3X,2H L,3X,2H M/)
   12 FORMAT(4I5)
   13 FORMAT(/,2X,' OUT OF PLANE DEFORMATION'/
     1 2X,8H ANG-LNM,7X,8H ANG-KNM,7X,8H ANG-KNL,
     2 8X,2H K,3X,2H L,3X,2H M,3X,2H N/)
   14 FORMAT(2X,F10.5,5X,F10.5,5X,F10.5,3X,4I5,8X,2H (,I2,1H))
   15 FORMAT(/,2X,8H TORSION/
     1 2X,8H ANG-KLM,7X,8H ANG-LMN,7X,8H ANG-TOR,
     2 8X,2H K,3X,2H L,3X,2H M,3X,2H N/)
   16 FORMAT(//,2X,' UNIT VECTOR COMPONENTS')
   17 FORMAT(/,2X,22H FIRST THREE TERMS EX ,I2,8H,1   EY  ,I2,
     1 8H,1   EZ ,I2,3H,1 /)
   18 FORMAT(9F13.5)
   19 FORMAT(//,2X,' B MATRIX'/)
C
      WRITE(6,1)
C     NINT IS NUMBER OF VIBRATIONAL NORMAL COORDINATES
C         WITH REDUNDANT COORDINATES IF ANY
C     NIC IS TOTAL NUMBER OF NORMAL COORDINATES
C         WITH ROTATIONAL AND TRANSLATIONAL NORMAL COORDINATES
C     NVIB IS NUMBER OF NORMAL COORDINATES TO BE ANALIZED
C     ILIN=0 NON-LINEAR POLYATOMIC MOLECULES
C     ILIN=1 DIATOMIC AND LINEAR MOLECULES
C     ISYM=0 WITHOUT SYMMETRY COORDINATE
C     ISYM=1 WITH SYMMETRY COORDINATE
C
      AR=PI/180.0D+00
C***INPUT INFORMATIONS FOR GF MATRIX METHOD***
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,2) NST,NBND,NLIB,NDEF,NTORS,ISYM
      NINT=NST+NBND+NLIB+NDEF+NTORS
      NROT=3
      IF(ILIN.NE.0) NROT=2
      NIC=NINT+3+NROT
      NVIB=3*NATOM-3-NROT
      WRITE(6,3) NST,NBND,NLIB,NDEF,NTORS,NINT,NROT,NIC,NVIB,ILIN,ISYM
C
C   THE CALCULATION OF B VECTORS
C   THE CALCULATION OF UNIT VECTORS
      DO 101 I=1,NATOM
      DO 101 J=1,NATOM
      EX(I,J)=A00
      EY(I,J)=A00
  101 EZ(I,J)=A00
      DO 102 I=1,NIC
      DO 102 J=1,NIC
  102 B(I,J)=A00
      DO 103 I=1,NAT1
      IR=I+1
      DO 103 J=IR,NATOM
      IJ=I+IOFF(J)
      EX(I,J)=-(X(I)-X(J))/R(IJ)
      EY(I,J)=-(Y(I)-Y(J))/R(IJ)
      EZ(I,J)=-(Z(I)-Z(J))/R(IJ)
      EX(J,I)=-EX(I,J)
      EY(J,I)=-EY(I,J)
      EZ(J,I)=-EZ(I,J)
  103 CONTINUE
C***INPUT DATA FOR STRETCHINGS***
      IF(NST.EQ.0) GO TO 201
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,4) (KR(I),LR(I),I=1,NST)
      WRITE(6,5)
      WRITE(6,6)
      DO 104 I=1,NST
      K=KR(I)
      L=LR(I)
      II=I
      KL=IOFF(MAX0(K,L))+MIN0(K,L)
      WRITE(6,7) R(KL),KR(I),LR(I),II
  104 CONTINUE
      CALL STRNG(B,EX,EY,EZ,NXYZ,NNE)
C***INPUT DATA FOR BENDINGS***
  201 IF(NBND.EQ.0) GO TO 202
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,8) (KA(I),LA(I),MA(I),I=1,NBND)
      WRITE(6,9)
      DO 105 I=1,NBND
      K=KA(I)
      L=LA(I)
      M=MA(I)
      II=I+NST
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      AGLB(I)=DACOS(AKLM)
      ANG=AGLB(I)/AR
      WRITE(6,10) ANG,KA(I),LA(I),MA(I),II
  105 CONTINUE
      CALL BENDNG(B,EX,EY,EZ,NXYZ,NNE)
C***INPUT DATA FOR LINEAR BENDINGS***
  202 IF(NLIB.EQ.0) GO TO 203
      NLHF=NLIB/2
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,8) (KB(I),LB(I),MB(I),I=1,NLHF)
      WRITE(6,11)
      DO 106 I=1,NLHF
      I1=2*I-1+NST+NBND
      I2=I1+1
      K=KB(I)
      L=LB(I)
      M=MB(I)
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      AGLL(I)=DACOS(AKLM)
      ANG=AGLL(I)/AR
      WRITE(6,10) ANG,KB(I),LB(I),MB(I),I1
      WRITE(6,10) ANG,KB(I),LB(I),MB(I),I2
  106 CONTINUE
      CALL LINBND(B,EX,EY,EZ,NXYZ,NNE)
C***INPUT DATA FOR DEFORMATIONS***
  203 IF(NDEF.EQ.0) GO TO 204
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,12) (KD(I),LD(I),MD(I),ND(I),I=1,NDEF)
      WRITE(6,13)
      DO 107 I=1,NDEF
      II=I+NST+NBND+NLIB
      K=KD(I)
      L=LD(I)
      M=MD(I)
      N=ND(I)
      ALNM=EX(N,L)*EX(N,M)+EY(N,L)*EY(N,M)+EZ(N,L)*EZ(N,M)
      AGLD(I)=DACOS(ALNM)
      AKNM=EX(N,K)*EX(N,M)+EY(N,K)*EY(N,M)+EZ(N,K)*EZ(N,M)
      AGLE(I)=DACOS(AKNM)
      AKNL=EX(N,K)*EX(N,L)+EY(N,K)*EY(N,L)+EZ(N,K)*EZ(N,L)
      AGLF(I)=DACOS(AKNL)
      DLM=AGLD(I)/AR
      DKM=AGLE(I)/AR
      DKL=AGLF(I)/AR
      WRITE(6,14) DLM,DKM,DKL,KD(I),LD(I),MD(I),ND(I),II
  107 CONTINUE
      CALL DEFORM(B,EX,EY,EZ,NXYZ,NNE)
C***INPUT DATA FOR TORSIONS***
  204 IF(NTORS.EQ.0) GO TO 205
CCC   IF(.NOT.ISOMOL)
CCC  *READ(5,12) (KT(I),LT(I),MT(I),NT(I),I=1,NTORS)
      WRITE(6,15)
      DO 108 I=1,NTORS
      II=I+NST+NBND+NLIB+NDEF
      K=KT(I)
      L=LT(I)
      M=MT(I)
      N=NT(I)
C   BASED ON DEFINITION OF WILSON-DECIOUS-CROSS
      AKLM=EX(L,K)*EX(L,M)+EY(L,K)*EY(L,M)+EZ(L,K)*EZ(L,M)
      AGLT(I)=DACOS(AKLM)
      ALMN=EX(M,L)*EX(M,N)+EY(M,L)*EY(M,N)+EZ(M,L)*EZ(M,N)
      AGLO(I)=DACOS(ALMN)
      SINP=DSIN(AGLT(I))
      PX=(EY(K,L)*EZ(L,M)-EZ(K,L)*EY(L,M))/SINP
      PY=(EZ(K,L)*EX(L,M)-EX(K,L)*EZ(L,M))/SINP
      PZ=(EX(K,L)*EY(L,M)-EY(K,L)*EX(L,M))/SINP
      SINQ=DSIN(AGLO(I))
      QX=(EY(L,M)*EZ(M,N)-EZ(L,M)*EY(M,N))/SINQ
      QY=(EZ(L,M)*EX(M,N)-EX(L,M)*EZ(M,N))/SINQ
      QZ=(EX(L,M)*EY(M,N)-EY(L,M)*EX(M,N))/SINQ
      AKLMN=PX*QX+PY*QY+PZ*QZ
      IF(DABS(AKLMN).GT.ONE) AKLMN=DSIGN(ONE,AKLMN)
      AGLR(I)=DACOS(AKLMN)
C***********************************************************************
C   CHECK ORIENTATION OF TORSIONAL ANGLE
      SKLMN=PX*EX(M,N)+PY*EY(M,N)+PZ*EZ(M,N)
      IF(SKLMN.LT.A00) AGLR(I)=PI+PI-AGLR(I)
C***********************************************************************
      ATL=AGLT(I)/AR
      ATM=AGLO(I)/AR
      ATT=AGLR(I)/AR
      WRITE(6,14) ATL,ATM,ATT,KT(I),LT(I),MT(I),NT(I),II
  108 CONTINUE
      CALL TORS(B,EX,EY,EZ,NXYZ,NNE)
C
C   PRINT OUT E VECTORS
cets030691
  205 continue
      ip=prcntr('IS_ON BRIEF')
      if(ip.eq.0) then
        WRITE(6,16)
        DO 110 I=1,NATOM
          WRITE(6,17) I,I,I
          WRITE(6,18) (EX(I,J),EY(I,J),EZ(I,J),J=1,NATOM)
  110   CONTINUE
      endif
      IRX=NINT+1
      IF(AIXX.LE.1.0D-3) IRX=NINT
      IRY=IRX+1
      IF(AIYY.LE.1.0D-3) IRY=IRX
      IRZ=IRY+1
      IF(AIZZ.LE.1.0D-3) IRZ=IRY
      ITX=IRZ+1
      ITY=IRZ+2
      ITZ=IRZ+3
      DO 111 J=1,NATOM
      JX=3*J-2
      JY=3*J-1
      JZ=3*J
C   B MATRIX FOR ROTATIONS
      IF(AIXX.LE.1.0D-3) GO TO 206
      B(IRX,JX)=A00
      B(IRX,JY)=-(Z(J)*W(J))/AIXX
      B(IRX,JZ)=(Y(J)*W(J))/AIXX
  206 IF(AIYY.LE.1.0D-3) GO TO 207
      B(IRY,JX)=(Z(J)*W(J))/AIYY
      B(IRY,JY)=A00
      B(IRY,JZ)=-(X(J)*W(J))/AIYY
  207 IF(AIZZ.LE.1.0D-3) GO TO 208
      B(IRZ,JX)=-(Y(J)*W(J))/AIZZ
      B(IRZ,JY)=(X(J)*W(J))/AIZZ
      B(IRZ,JZ)=A00
C   B MATRIX FOR TRANSLATIONS
  208 WS=W(J)/SUMW
      B(ITX,JX)=WS
      B(ITY,JY)=WS
      B(ITZ,JZ)=WS
  111 CONTINUE
cets030991
      ip=prcntr('IS_ON BRIEF')
      if(ip.eq.0) then
        WRITE(6,19)
        CALL MATOUT(B,NXYZ,NXYZ,NIC,NIC,6)
      endif
C
      RETURN
      END
