C//////////////////////////////////////////////////////////////////////
	SUBROUTINE ORTHOG (NA,NC,NS,IOPT,XAR,BS1,BS2,BS3,FLAG)
C  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
C  TEST ORTHOGINALITY CONDITIONS CONCERNING EXTERNAL COORDS AND CART.
C  DERIVATIVES OF INTERNAL COORDS.
C  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
C  ON ENTRY:
C	NA			NUMBER OF ATOMS
C	NC			NA*3
C	NS			NUMBER OF SYMETRIZED INTERNAL COORDS
C	XAR	(NA,3)		REFERENCE GEOMETRY
C	BS1	(NC,NC)		1ST CART DERIVATIVES OF INTERNAL COORDS
C	BS2	(NC,NC)		SCRATCH SPACE (USED IFF NDER>1)
C	BS3	(NC,NC,NC)	SCRATCH SPACE (USED IFF NDER>2)
C  ON RETURN
C	FLAG	LOGICAL	SET TRUE IF ANY ORTHOG. CONDITIONS FAILS
C  NOTES:
C	1) HIGHEST CONDITION TESTED DETERMINED BY IOPT(4)
C  \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (TOL = 1.0D-8 )
      PARAMETER (ZERO = 0.0D0,ONE=1.0D0)
	LOGICAL FLAG, NOERR, RFLAG
	DIMENSION XAR(NA,3)
	DIMENSION BS1(NC,NC), BS2(NC,NC), BS3(NC,NC,NC), IOPT(30)
	DIMENSION SUMV(3), V(3), V2(3), V3(3), V5(3), E(3)
      COMMON /IO/ IIN1,IOUT,IIN2,ICHECK,NPRT,
     $   I11,I15,I17,I20,I24,
     $   I12,I16,I18,I21,I25,
     $   I31,I32,I33,I35,I36,I37,
     $   ISCR1,ISCR2,ISCR3,ISCR4,ISCR5,ISCR6,ISCR7,ISCR8,ISCR9,ISCR10,
     $   ISCR11,ISCR12,ISCR13,ISCR14
  1	FORMAT (//' TESTING ORTHOGONALITY CONDITIONS:')
  2	FORMAT ('     TOLERANCE IS SET TO', E10.1D3)
  3	FORMAT (/'     1ST CONDITION HOLDS FOR ALL CASES.')
  4	FORMAT (/'     2ND CONDITION HOLDS FOR ALL CASES.')
  5	FORMAT (/'     3RD CONDITION HOLDS FOR ALL CASES.')
  6	FORMAT (/'     1ST CONDITION FAILS FOR:')
  7	FORMAT (/'     2ND CONDITION FAILS FOR:')
  8	FORMAT (/'     3RD CONDITION FAILS FOR:')
  9	FORMAT (12X,'P = ',I5,2X,'ETA = ',I5)
 10	FORMAT (12X,'P = ',I5,2X,'ETA = ',I5,2X,'J2 = ',I5)
 11	FORMAT (12X,'P = ',I5,2X,'ETA = ',I5,2X,'J2 = ',I5,2X,'J3 = ',I5)

	FLAG = .FALSE.
	IF (IOPT(4).LT.1) RETURN
	WRITE (IOUT, 1)
	WRITE (IOUT, 2) TOL

        MDER = IOPT(4)+IOPT(5)

C FIRST CONDITION TRANSLATIONS
	NOERR = .TRUE.
	DO 100 IP = 1, NS
	DO 100 I = 1, 3
	SUM = ZERO
	DO 110 J = I, NC, 3
 110	SUM = SUM - BS1(IP,J)
	IF (ABS(SUM).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,6)
		NOERR = .FALSE.
		WRITE (IOUT,9) IP, I
		END IF
 100	CONTINUE

C FIRST CONDITION ROTATIONS
	DO 160 IP = 1, NS
	DO 163 I = 1, 3
 163	SUMV(I) = ZERO
	
	DO 150 JA = 1, NA
	V(1) = XAR(JA,1)
	V(2) = XAR(JA,2)
	V(3) = XAR(JA,3)
	DO 150 JB = 1, 3
	J = (JA-1)*3 + JB
	E(1) = ZERO
	E(2) = ZERO
	E(3) = ZERO
	E(JB) = ONE
	CALL VECPRO (E, V, V2)
	DO 150 I = 1, 3
 150	SUMV(I) = SUMV(I) + V2(I)*BS1(IP,J)

	DO 160 I = 1, 3
	IF (ABS(SUMV(I)).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,6)
		NOERR = .FALSE.
		WRITE (IOUT,9) IP, I+3
		END IF
 160	CONTINUE
	IF (NOERR) WRITE (IOUT,3)
	IF (MDER.LE.2) RETURN
C SECOND CONDITION TRANSLATIONS
	NOERR = .TRUE.
	DO 200 IP = 1, NS
	CALL XIN (NC,0,BS2,-IP,ISCR1)
	DO 200 K = 1, NC
	DO 200 JB = 1, 3
	SUM = ZERO
	DO 210 J = JB, NC, 3
 210	SUM = SUM - BS2(J,K)
	IF (ABS(SUM).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,7)
		NOERR = .FALSE.
		WRITE (IOUT,10) IP, JB, K
		END IF
 200	CONTINUE

C SECOND CONDITION ROTATIONS
	DO 260 IP = 1, NS
	CALL XIN (NC,0,BS2,-IP,ISCR1)
	DO 260 K = 1, NC
	KN = (K-1)/3+1
	KB = K-(KN-1)*3
	V3(1) = ZERO
	V3(2) = ZERO
	V3(3) = ZERO
	V3(KB) = ONE

	SUMV(1) = ZERO
	SUMV(2) = ZERO
	SUMV(3) = ZERO
	DO 250 JA = 1, NA
	V(1) = XAR(JA,1)
	V(2) = XAR(JA,2)
	V(3) = XAR(JA,3)
	DO 250 JB = 1, 3
	J = (JA-1)*3+JB
	E(1) = ZERO
	E(2) = ZERO
	E(3) = ZERO
	E(JB) = ONE
	CALL VECPRO (E, V, V2)
	DO 252 I = 1, 3
 252	SUMV(I) = SUMV(I) + V2(I)*BS2(J,K)
	IF (JA.EQ.KN) THEN
		CALL VECPRO (E, V3, V2)
		DO 254 I = 1, 3
 254		SUMV(I) = SUMV(I) + V2(I)*BS1(IP,J)
		END IF
 250	CONTINUE

	DO 260 I = 1, 3
	IF (ABS(SUMV(I)).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,7)
		NOERR = .FALSE.
		WRITE (IOUT,10) IP, I+3, K
		END IF
 260	CONTINUE
	IF (NOERR) WRITE (IOUT,4)
	IF (MDER.LE.3) RETURN
C THIRD CONDITION TRANSLATIONS
	NOERR = .TRUE.
	DO 300 IP = 1, NS
	CALL YIN (NC,0,BS3,-IP,ISCR3)

	DO 300 K = 1, NC
	DO 300 L = 1, NC
	DO 300 JB = 1, 3
	SUM = ZERO
	DO 310 J = JB, NC, 3
 310	SUM = SUM - BS3(J,K,L)
	IF (ABS(SUM).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,8)
		NOERR = .FALSE.
		WRITE (IOUT,11) IP, JB, L, K
		END IF
 300	CONTINUE

C THIRD CONDITION ROTATIONS

	DO 360 IP = 1, NS
	CALL XIN (NC,0,BS2,-IP,ISCR1)
	CALL YIN (NC,0,BS3,-IP,ISCR3)

	DO 360 K = 1, NC
	KN = (K-1)/3+1
	KB = K-(KN-1)*3
	V3(1) = ZERO
	V3(2) = ZERO
	V3(3) = ZERO
	V3(KB) = ONE
	DO 360 L = 1, NC
	LN = (L-1)/3+1
	LB = L-(LN-1)*3
	V5(1) = ZERO
	V5(2) = ZERO
	V5(3) = ZERO
	V5(LB) = ONE

	SUMV(1) = ZERO
	SUMV(2) = ZERO
	SUMV(3) = ZERO
	DO 350 JA = 1, NA
	V(1) = XAR(JA,1)
	V(2) = XAR(JA,2)
	V(3) = XAR(JA,3)
	DO 350 JB = 1, 3
	J = (JA-1)*3+JB
	E(1) = ZERO
	E(2) = ZERO
	E(3) = ZERO
	E(JB) = ONE
	CALL VECPRO (E, V, V2)
	DO 352 I = 1, 3
 352	SUMV(I) = SUMV(I) + V2(I)*BS3(J,K,L)
	IF (JA.EQ.KN) THEN
		CALL VECPRO (E, V3, V2)
		DO 354 I = 1, 3
 354		SUMV(I) = SUMV(I) + V2(I)*BS2(J,L)
		END IF
	IF (JA.EQ.LN) THEN
		CALL VECPRO (E, V5, V2)
		DO 356 I = 1, 3
 356		SUMV(I) = SUMV(I) + V2(I)*BS2(J,K)
		END IF
 350	CONTINUE
	DO 360 I = 1, 3
	IF (ABS(SUMV(I)).GT.TOL) THEN
		IF (NOERR) WRITE (IOUT,8)
		NOERR = .FALSE.
		WRITE (IOUT,11) IP, I+3, L, K
		END IF	
 360	CONTINUE
	IF (NOERR) WRITE (IOUT,5)

	RETURN
	END
