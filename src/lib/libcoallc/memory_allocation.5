.TH memory_allocation 5 "11 April, 1991" "Psi Release 2.0" "\*(]D"
.SH NAME
coinit, coallc, cofree, sizeof, corllc, cosize, codump \- allocate memory in a Fortran 77 program

.SH SYNOPSIS
.nf
subroutine coinit(array,size)
integer size
integer array(size)

integer function coallc(array,amount)
integer array(*)
integer amount

subroutine cofree(array,pointer)
integer array(*)
integer pointer

integer function sizeof(type)
character*(*) type

subroutine corllc(array,pointer,amount,type)
integer array(*)
integer pointer
integer amount
character*(*) type

integer function cosize(array,pointer)
integer array(*)
integer pointer

subroutine cochec(array)
integer array(*)

subroutine codump(array)
integer array(*)
.fi

.SH DESCRIPTION
.LP
These routines provide a method of allocating and
deallocating memory in Fortran.
They will usually detect memory overwrite conditions that
involve the arrays allocated with
the \fBcoallc\fP and \fBcorllc\fP subprograms,
and will thus assist
in the program development and debugging.  To use these routines
the Fortran memory allocation library (libcoallc.a) must be linked
with the program.

.LP
Before any memory can be allocated a free storage pool must be
initialized.
This is done by calling the \fBcoinit\fP routine with a storage
pool of integer data, \fIarray\fP, which has a length of \fIsize\fP
integers.

.LP
The \fBcoallc\fP routine is used to allocate storage.  This is
done by passing it a storage pool, \fIarray\fP, and the
quantity, \fIamount\fP, of data to be
allocated, in terms of the size of an integer.
This routine returns an index into the storage pool.  This
indicates where the allocated data begins.  This new data is not zeroed.
It is up to the programmer to initialize the data.

.LP
Once data with has be allocated and is no longer needed, it can be
returned to the storage pool with the \fBcofree\fP call.  The
arguments are the storage pool, \fIarray\fP, and the index into
the storage array, \fIpointer\fP, which was previously returned by
the \fBcoallc\fP or \fBcorllc\fP routine.

.LP
Storage for data of the Fortran type REAL*8 can also be allocated.
Since some machine architectures have an integer size of 8 bytes, the number
of elements of the integer storage pool which are needed for each REAL*8
datum varies.  The programmer can call \fBsizeof('REAL')\fP in this case.
The return value will be the number of integers in a real*8 datum.
The \fBsizeof\fP function can also be called with
the arguments \fB'INT'\fP (it returns 1), \fB'REAL_IN_BYTES'\fP (the number
of bytes in the floating point datum used throughout the Psi programs,
which is REAL*8),
and 'INT_IN_BYTES' (the number of bytes in an integer datum).

.LP
Data which has already been allocated can be reallocated to be a
different size with the \fBcorllc\fP function.  The storage pool
is \fIarray\fP, the pointer to the old data is \fIpointer\fP,
the amount of integer data in the new array is \fIamount\fP, and
the type of data is \fItype\fP which must be \fB'REAL'\fP or \fB'INT'\fP.

.LP
The amount of data which has been allocated for a given chunk of data can be
obtained as the return value of the \fBcosize\fP function.
The storage pool is \fIarray\fP and the pointer to the
data is \fIpointer\fP.  The return value is equal to or greater than
the amount of data allocated with the \fBcoallc\fP or \fBcorllc\fP function.

.LP
The \fBcochec\fP routine can be used to check for inconsistencies in the
free storage pool.  It takes as its only argument the free storage pool.
It does nothing if no problem is detected, however, if something is
wrong with the free storage pool, then it will call \fBcodump\fP and
will abort the program.  The usual source of problems with the free
storage pool is a data write beyond the bounds of an array.

.LP
The internally maintained linked list of chunks of allocated and free
data can be printed out by the \fBcodump\fP routine, which takes as
its only argument the free storage pool.  This can be useful in the
debugging process.

.SH EXAMPLES
.LP
The following example allocates real and integer data and passes it
to the work routine where it is used and then the data is freed:
.in +.5i
.nf
\&.
\&.
\&.
integer npool
parameter (npool = 1000)
integer ia(npool),ip,coallc,rp,nint,nreal,sizeof

nint = 15
nreal = 10
call coinit(ia,npool)
ip = coallc(ia,nint)
rp = coallc(ia,nreal*sizeof('REAL'))

call work(ia(ip),ia(rp),nint,nreal)

call free(ia,ip)
call free(ia,rp)
\&.
\&.
\&.
return
end

subroutine work(idat,rdat,nidat,nrdat)
integer nidat,nrdat
integer idat(nidat)
real*8 rdat(nrdat)
\&.
\&.
\&.
return
end
.fi
.in -.5i
